%%sql
postgresql:///games

-- All information for the top ten best-selling games were selected
-- The results from best-selling game down to tenth best-selling ordered
SELECT *
FROM game_sales
ORDER BY games_sold DESC
LIMIT 10;

-- One shortcoming in the database is that there are no reviews data for some of the games on game_sales table

-- games_sales and reviews joined
-- A count of the number of games where both critic_score and user_score are null was selected
SELECT COUNT(g.game)
FROM game_sales g
LEFT JOIN reviews r
ON g.game = r.game
WHERE r.critic_score IS NULL AND r.user_score IS NULL;

-- Only a small percentage of the game_sales table do not have any reviews data. Now I have analysed what critics think.

-- Release year and average critic score for each year, rounded and aliased was selected
-- The game_sales and reviews tables joined
-- Grouped by release year
-- Ordered the data from highest to lowest avg_critic_score and limited it to 10 results
SELECT 
    g.year, 
    ROUND(AVG(r.critic_score), 2) AS avg_critic_score
FROM game_sales g
LEFT JOIN reviews r
ON g.game = r.game
GROUP BY g.year
ORDER BY avg_critic_score DESC 
LIMIT 10;

-- Pasted the query from the previous task; updated it to add a count of games released in each year called num_games
-- Updated the query so that it only returns years that have more than four reviewed games
SELECT 
    g.year,
    ROUND(AVG(r.critic_score), 2) AS avg_critic_score,
    COUNT(g.game) AS num_games
FROM game_sales g
INNER JOIN reviews r
ON g.game = r.game
GROUP BY g.year
HAVING COUNT(g.game) > 4
ORDER BY avg_critic_score DESC 
LIMIT 10;

-- Selected the year and avg_critic_score for those years that dropped off the list of critic favorites 
-- Ordered the results from highest to lowest avg_critic_score
SELECT 
    year, 
    avg_critic_score
FROM top_critic_years
EXCEPT
SELECT year, avg_critic_score
FROM top_critic_years_more_than_four_games
ORDER BY avg_critic_score DESC;

-- Selected year, an average of user_score, and a count of games released in a given year, aliased and rounded
-- Included only years with more than four reviewed games; group data by year
-- Ordered data by avg_user_score, and limit to ten results
SELECT
    g.year,
    COUNT(g.game) AS num_games,
    ROUND(AVG(r.user_score), 2) AS avg_user_score  
FROM game_sales g
INNER JOIN reviews r
ON g.game = r.game
GROUP BY g.year
HAVING COUNT(g.game) > 4
ORDER BY avg_user_score DESC
LIMIT 10;

-- Selected the year results that appear on both tables
SELECT year
FROM top_critic_years_more_than_four_games
INTERSECT
SELECT year
FROM top_user_years_more_than_four_games;

-- Selected year and sum of games_sold, aliased as total_games_sold; ordered results by total_games_sold descending
-- Filtered game_sales based on whether each year is in the list returned in the previous task

SELECT 
    g.year, 
    SUM(g.games_sold) AS total_games_sold
FROM game_sales g
WHERE g.year IN (SELECT year
FROM top_user_years_more_than_four_games
INTERSECT
SELECT year
FROM top_critic_years_more_than_four_games)
GROUP BY g.year
ORDER BY total_games_sold DESC;
